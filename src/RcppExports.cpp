// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// SamplingPrior
Rcpp::List SamplingPrior(int iter, int NVer, int NEd, int PriorType, double a, std::string datafolder);
RcppExport SEXP _GraphMM_SamplingPrior(SEXP iterSEXP, SEXP NVerSEXP, SEXP NEdSEXP, SEXP PriorTypeSEXP, SEXP aSEXP, SEXP datafolderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type NVer(NVerSEXP);
    Rcpp::traits::input_parameter< int >::type NEd(NEdSEXP);
    Rcpp::traits::input_parameter< int >::type PriorType(PriorTypeSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::string >::type datafolder(datafolderSEXP);
    rcpp_result_gen = Rcpp::wrap(SamplingPrior(iter, NVer, NEd, PriorType, a, datafolder));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GraphMM_SamplingPrior", (DL_FUNC) &_GraphMM_SamplingPrior, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_GraphMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
